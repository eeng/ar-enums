= ar-enums

ActiveRecord::Enumerations is yet another solution to define enumerations in your Rails models.

== Description

It provides two forms of enumerations: 
* Internal, i.e. defined within the owner of the enum. This should be used when the enum is not shared between different models.
* External, i.e. defined on it's own class. 

== Internal enumerations

Can be defined in three styles:

=== Array of values style

This is the simplest case. The values are stored as ordinals in a foreign_key, similar to a belongs_to association. 
They are autogenerated starting at 1.

  class TrafficLight < ActiveRecord::Base
    enum :state, %w[red green yellow]
  end

  tl = TrafficLight.new(:state => :green)
  tl.state_id   # => 2    
  tl.state      # => #<ActiveRecord::Enum @label_method=:titleize, @name="green", @id=2>
  
The enumerations array is accessed with a class method:

  TrafficLight.states  # => [#<State @name="red", @id=1>, #<State @name="green", @id=2>, #<State @name="yellow", @id=3>]

=== Array of hashes style

This allows you to define new columns in the Enum value. If the :id is not specified is generated for you.

  class TrafficLight < ActiveRecord::Base
    enum :state, [
      { :name => :red, :stop_traffic => true, :rgb => 0xF00 },
      { :name => :green, :stop_traffic => false, :rgb => 0x0F0 }
    ]
  end

  tl = TrafficLight.new(:state => :green)
  tl.state_id       # => 2    
  tl.stop_traffic   # => false
  tl.rgb            # => 0x0F0

=== Block style

  class TrafficLight < ActiveRecord::Base
    enum :state do
      red :stop_traffic => true, :rgb => 0xF00
      green :stop_traffic => false, :rgb => 0x0F0
    end
  end

== External enumerations

When you have shared enumerations or just don't want to clutter the owner model with enums definitions, 
the enumeration can be on it's own class, as the State enum in the following example:

  class TrafficLight < ActiveRecord::Base
    enum :state
  end
  
  class State < ActiveRecord::Enum
    enumeration do
      red :stop_traffic => true, :rgb => 0xF00
      green :stop_traffic => false, :rgb => 0x0F0
    end
  end
  
Note the block style sintax is exactly the same as in the internal enumerations.
  
Then you can access the enumerations collection from both places:

  TrafficLight.states  # => [#<State @name="red", @id=1>, #<State @name="green", @id=2>]
  States.all           # => [#<State @name="red", @id=1>, #<State @name="green", @id=2>]

The <tt>enum</tt> method accept a <tt>:class_method</tt> option similar to the one in <tt>belongs_to</tt> and others to specify the class of the enum. 

== Note on Patches/Pull Requests
 
* Fork the project.
* Make your feature addition or bug fix.
* Add tests for it. This is important so I don't break it in a
  future version unintentionally.
* Commit, do not mess with rakefile, version, or history.
  (if you want to have your own version, that is fine but bump version in a commit by itself I can ignore when I pull)
* Send me a pull request. Bonus points for topic branches.

== Copyright

Copyright (c) 2010 Emma Nicolau. See LICENSE for details.
